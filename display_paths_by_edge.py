# ---------------------------------------------------------------------------
# display_paths_by_edge.py
# Created on: Fri Mar 19 2010 02:40:40 PM
#   (generated by ArcGIS/ModelBuilder)
# Usage: display_nodes <network_trunc_lc_txt> <Feature_Set> 
# ---------------------------------------------------------------------------

# E:\code\connmod\branches\ch\data\net2010\network_trunc_lc.txt "Feature Set" "2010\truncated\edges - trunc lc"
# E:\code\connmod\branches\ch\data\net2010c\network_trunc_lc.txt "2010\truncated\edges - trunc lc"

import sys, string, os, arcgisscripting, csv, networkx as NX, cm

# Create the Geoprocessor object
GP = cm.gp_init()
log = '%s/log.txt' % os.path.dirname(sys.argv[0])
cm.log_init(log, 'debug')

# Script arguments...
network_txt = sys.argv[1]
edges_lyr   = sys.argv[2]

# read in network
cm.log('Reading input network')
G = cm.read_network(network_txt)
edges_shp = G.config[('shapefile', 'edges')]
lc_txt = G.config[('leastcostpaths', 'txt')]

## debug
##edges_lyr = 'edges_lyr'; GP.MakeFeatureLayer(edges_shp, edges_lyr) 
##GP.SelectLayerByAttribute_management(edges_lyr, "NEW_SELECTION", "\"EdgeID\" IN (6693)")

# get selected edges
cur = GP.SearchCursor(edges_lyr); row = cur.Next(); e_selected = []
while row:
    e_selected.append(row.GetValue('EdgeID')); row = cur.Next()
cm.log('Selected %d edges: %s' % (len(e_selected), ','.join([str(x) for x in e_selected])))
    
# get lcpaths
cr = csv.reader(open(lc_txt, 'r')); row = cr.next(); e_paths = [] # skip header
n_paths = 0
for row in cr: 
    (c1, c2, dist, path) = row  # csv fields: "centroid1","centroid2","dist","path"
    path_nodes = [int(x) for x in path[1:][:-1].split(', ')]  # exract nodes from string like "[2248, 2246, 2245]"
    edges = []
    for x in range(len(path_nodes)-1):
        edges.append(G.eid[path_nodes[x]][path_nodes[x+1]])  # get EdgeId based on sequence of nodes    

    for e in e_selected:
        if e in edges:
            ##print '  %d in %s' % (e, ','.join([str(x) for x in edges]))
            e_paths.extend(edges)
            n_paths =+ 1
if n_paths > 0:
    cm.log('Found %d paths with %d edges' % (n_paths, len(e_paths)))
    expr = "\"EdgeID\" IN (%s)" % ','.join([str(x) for x in e_paths])
    cm.log(expr)
    GP.SelectLayerByAttribute_management(edges_lyr, "NEW_SELECTION", expr)
else:
    cm.log('Found 0 paths for selected edges.')


