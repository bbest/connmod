# ---------------------------------------------------------------------------
# display_nodes.py
# Created on: Fri Mar 19 2010 02:40:40 PM
#   (generated by ArcGIS/ModelBuilder)
# Usage: display_nodes <network_trunc_lc_txt> <Feature_Set> 
# ---------------------------------------------------------------------------

# E:\code\connmod\branches\ch\data\net2010\network_trunc_lc.txt "Feature Set" "2010\truncated\edges - trunc lc"
# C:\temp\connectivity\network_cost\Net_LC.txt C:\temp\connectivity\network_cost\geodb.gdb\pts_inx edges


import sys, string, os, arcgisscripting
import networkx as NX
import cm

# Create the Geoprocessor object
GP = cm.gp_init()
log = '%s/log.txt' % os.path.dirname(sys.argv[0])
cm.log_init(log, 'debug')

# Script arguments...
network_txt = sys.argv[1]
pts_inx     = sys.argv[2]
edges_lyr   = sys.argv[3]

# read in network
cm.log('Reading input network')
G = cm.read_network(network_txt)
nodes_shp = G.config[('shapefile', 'nodes')]
edges_shp = G.config[('shapefile', 'edges')]

# Local variables...
centroids_near_pts = 'in_memory\\centroids_near_pts'
##centroids_near_pts = "E:\\code\\connmod\\branches\\ch\\data\\net2010\\centroids_near.dbf"
if GP.exists(centroids_near_pts):
    GP.delete(centroids_near_pts)

#debug
#GP.CopyFeatures(pts_inx, r'C:\temp\connectivity\network_cost\geodb.gdb\pts_inx')

GP.MakeFeatureLayer(nodes_shp, 'nodes_lyr')
GP.SelectLayerByAttribute_management('nodes_lyr', 'NEW_SELECTION', "\"NodeType\" = 'centroid'")
GP.GenerateNearTable_analysis(pts_inx, 'nodes_lyr', centroids_near_pts, "", "NO_LOCATION", "NO_ANGLE", "CLOSEST", "0")

# loop through points, getting paths and edges for display
cur = GP.SearchCursor(centroids_near_pts)
row = cur.Next()
nbunch = []
while row:
    near_fid = row.GetValue('NEAR_FID')
    nbunch.append(near_fid)  #FIX!:  using dirtball shortcut of NodeID = FID + 1
    row = cur.Next()

ebunch = []
for u,v in cm.list_lower_tri(nbunch):
    d, p = NX.bidirectional_dijkstra(G, u, v)  # real work is here to calculate shortest path
    #GP.TableSelect_analysis(network_trunc_lc_paths_dbf, selected_paths_table, "\"FromNode\" IN (%d, %d) AND \"ToNode\" IN (%d, %d)" % (u,v,u,v))
    # get EdgeIDs from path of nodes
    for i in range(len(p)-1):
        ebunch.append(G.eid[p[i]][p[i+1]])
    GP.addmessage('Patch %d (node %d) to Patch %d (node %d)' % (G.npatchid[u], u, G.npatchid[v], v))
    GP.addmessage('  total cost distance: %d' % d)
    GP.addmessage('  path by NodeIDs: %s' % ','.join([str(x) for x in p]))

GP.SelectLayerByAttribute_management(edges_lyr, "NEW_SELECTION", "\"EdgeID\" IN (%s)" % ','.join([str(x) for x in ebunch]))

